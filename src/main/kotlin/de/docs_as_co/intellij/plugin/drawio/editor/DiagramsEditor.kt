package de.docs_as_co.intellij.plugin.drawio.editor

import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.editor.Document
import com.intellij.openapi.editor.colors.EditorColorsListener
import com.intellij.openapi.editor.colors.EditorColorsManager
import com.intellij.openapi.editor.colors.EditorColorsScheme
import com.intellij.openapi.editor.event.DocumentEvent
import com.intellij.openapi.editor.event.DocumentListener
import com.intellij.openapi.fileEditor.FileDocumentManager
import com.intellij.openapi.fileEditor.FileEditor
import com.intellij.openapi.fileEditor.FileEditorLocation
import com.intellij.openapi.fileEditor.FileEditorState
import com.intellij.openapi.project.DumbAware
import com.intellij.openapi.project.Project
import com.intellij.openapi.util.Key
import com.intellij.openapi.util.UserDataHolderBase
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.openapi.vfs.VirtualFileManager
import com.intellij.openapi.vfs.newvfs.BulkFileListener
import com.intellij.openapi.vfs.newvfs.events.VFileEvent
import com.intellij.util.messages.MessageBusConnection
import com.intellij.util.ui.UIUtil
import com.jetbrains.rd.util.lifetime.LifetimeDefinition
import de.docs_as_co.intellij.plugin.drawio.settings.DiagramsUiTheme
import de.docs_as_co.intellij.plugin.drawio.settings.ZenumlUniversalApplicationSettings
import java.beans.PropertyChangeListener
import java.io.BufferedReader
import javax.swing.JComponent


class DiagramsEditor(project: Project, private val file: VirtualFile) : FileEditor, EditorColorsListener, DumbAware,
    ZenumlUniversalApplicationSettings.SettingsChangedListener {
    private val lifetimeDef = LifetimeDefinition()
    private val lifetime = lifetimeDef.lifetime
    private val userDataHolder = UserDataHolderBase()
    private val xmlHeader = """<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
"""

    override fun getFile() = file

    private var view :DiagramsWebView
    private var doc: Document


    init {

        //subscribe to changes of the theme
        val settingsConnection = ApplicationManager.getApplication().messageBus.connect(this)
        settingsConnection.subscribe(EditorColorsManager.TOPIC, this)
        settingsConnection.subscribe(ZenumlUniversalApplicationSettings.SettingsChangedListener.TOPIC, this)
        view = DiagramsWebView(lifetime, uiThemeFromConfig().key)
        doc = FileDocumentManager.getInstance().getDocument(file)!!
        val documentListener: DocumentListener = object : DocumentListener {
            override fun documentChanged(event: DocumentEvent) {
                // We can also use doc.text
                view.loadXmlLike(event.document.text)
            }
        }
        doc.addDocumentListener(documentListener)
        // Listen to any file modification in the project.
        val connection: MessageBusConnection = project.messageBus.connect(this)
        connection.subscribe(VirtualFileManager.VFS_CHANGES, object : BulkFileListener {
            override fun after(events: MutableList<out VFileEvent>) {
                events.forEach {
                    if (it.file!!.name == getFile().name) {
                        val content = getFile().inputStream.bufferedReader().use(BufferedReader::readText)
                        view.loadXmlLike(content)
                    }
                }
            }
        })
        initView()
    }

    private fun uiThemeFromConfig(): DiagramsUiTheme {
        var uiTheme = ZenumlUniversalApplicationSettings.instance.getDiagramsSettings().uiTheme

        if (uiTheme == DiagramsUiTheme.DEFAULT) {
            //set theme according to IntelliJ-theme
            if (UIUtil.isUnderDarcula()) {
                uiTheme = DiagramsUiTheme.DARK
            } else {
                uiTheme = DiagramsUiTheme.KENNEDY
            }
        }
        return uiTheme
    }

    private fun initView() {
        view.initialized().then {
            if (file.name.endsWith(".png")) {
                val payload = file.inputStream.readBytes()
                view.loadPng(payload)
            } else {
                val payload = file.inputStream.reader().readText()
                view.loadXmlLike(payload)
            }
        }

        view.xmlContent.advise(lifetime) { xml ->
            if (xml !== null) {
                val isSVGFile = file.name.endsWith(".svg")
                val isPNGFile = file.name.endsWith(".png")
                if ( isSVGFile ) {
                    //ignore the xml payload and ask for an exported svg
                    view.exportSvg().then{ data: String ->
                        val content = xmlHeader + data
                        saveFile(content.toByteArray(charset("utf-8")))
                    }
                } else if ( isPNGFile ) {
                    //ignore the xml payload and ask for an exported svg
                    view.exportPng().then { data: ByteArray ->
                        saveFile(data)
                    }
                } else {
                    saveFile(xml.toByteArray(charset("utf-8")))
                }
            }
        }

    }

    @Override
    override fun globalSchemeChange(scheme: EditorColorsScheme?) {
        view.reload(uiThemeFromConfig().key) {
            initView()
        }
    }

    override fun onSettingsChange(settings: ZenumlUniversalApplicationSettings) {
        view.reload(uiThemeFromConfig().key) {
            initView()
        }
    }

    private fun saveFile(data: ByteArray) {
        ApplicationManager.getApplication().invokeLater {
            ApplicationManager.getApplication().runWriteAction {
                file.getOutputStream(this).apply {
                    writer().apply {
                        //svg and png are returned base64 encoded
                        write(data)
                        flush()
                    }
                    flush()
                    close()
                }
            }
        }
    }
    override fun getComponent(): JComponent {
        return view.component
    }

    override fun getPreferredFocusedComponent(): JComponent {
        return view.component
    }

    override fun getName() = "ZenUML Viewer"

    override fun setState(state: FileEditorState) {

    }

    override fun isModified(): Boolean {
        return false
    }

    override fun isValid(): Boolean {
        return true
    }

    override fun addPropertyChangeListener(listener: PropertyChangeListener) {
    }

    override fun removePropertyChangeListener(listener: PropertyChangeListener) {

    }

    override fun getCurrentLocation(): FileEditorLocation? {
        return null
    }

    override fun dispose() {
        lifetimeDef.terminate(true)
    }

    override fun <T : Any?> getUserData(key: Key<T>): T? {
        return userDataHolder.getUserData(key)
    }

    override fun <T : Any?> putUserData(key: Key<T>, value: T?) {
        userDataHolder.putUserData(key, value)
    }

}
